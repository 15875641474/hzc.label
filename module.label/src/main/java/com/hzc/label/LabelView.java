package com.hzc.label;import android.content.Context;import android.graphics.Canvas;import android.graphics.Paint;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;/** * Created by jonch on 2017/9/21. */public class LabelView extends LinearLayout {    //数据适配器    private TagAdapter adapter;    //是否需要重绘    private boolean redraw = true;    //是否启用移除功能    private boolean enableDelete = true;    private int selectedIndex = -1;    private int themeTextColorNormal = R.color.hzc_black_90, themeTextColorSelected = R.color.hzc_white;    private int themeTextSizeNormal = 14, themeTextSizeSelected = 14;    private int themeSelectorBackgroundDraw = R.drawable.selector_border_radius_gray;    private int themeDelImg = R.mipmap.ic_clear_input;    /**     * 全局启用删除功能     *     * @param bool     */    public void setEnableDelete(boolean bool) {        enableDelete = bool;    }    //所有的textview控件    List<TextView> tvlist = new ArrayList<>();    private void info(String message) {        System.out.println(message);    }    private void reDrawList() {        redraw = true;        this.postInvalidate();    }    /**     * 绘制     */    private void drawList() {        if (this.adapter == null || this.adapter.list == null || this.adapter.list.size() == 0)            return;        if (!redraw)            return;        int total = 0;        tvlist.clear();        Map<Integer, List<View>> result = new LinkedHashMap<>();        int i = 0;        for (int j = 0; j < this.adapter.list.size(); j++) {            Object obj = this.adapter.list.get(j);            //初始化数据层            if (result.get(i) == null) {                List<View> list = new ArrayList<>();                result.put(i, list);            }            List<View> views = result.get(i);            View item = LayoutInflater.from(this.getContext()).inflate(R.layout.tag_item, null);            TextView text = (TextView) item.findViewById(R.id.txt_jc_text);            text.setText(adapter.getText(obj));            text.setTextColor(getResources().getColor(themeTextColorNormal));            text.setTextSize(themeTextSizeNormal);            text.setBackgroundResource(themeSelectorBackgroundDraw);            text.setPadding(text.getPaddingLeft(), text.getPaddingTop(), text.getPaddingRight() + 30, text.getPaddingBottom());            ImageView imageView = item.findViewById(R.id.img_jc_clean);            imageView.setImageResource(themeDelImg);            if (!adapter.enableDelete(obj)) {                text.setPadding(text.getPaddingLeft(), text.getPaddingTop(), text.getPaddingRight() - 30, text.getPaddingBottom());                imageView.setVisibility(GONE);            }            //当前测量出来的控件的长度            int currentWidth = total;            View v = text;            while (!(v instanceof FrameLayout)) {                total += v.getPaddingLeft();                total += v.getPaddingRight();                v = (View) v.getParent();            }            total += v.getPaddingRight();            total += v.getPaddingLeft();            //在父级节点存放T            v.setTag(j);            //测绘文字的长度            Paint paint = new Paint();            paint.setTextSize(text.getTextSize());            int oneWidth = (int) paint.measureText(text.getText().toString());            total += oneWidth;            if (total > getWidth()) {//当前的item总和要比总的宽度要长，保留到下一次加入队伍                i++;                List<View> list = new ArrayList<>();                list.add(item);                result.put(i, list);                total = total - currentWidth;            } else {//依然有空隙，可以继续加入当前行                views.add(item);            }            tvlist.add(text);        }        //基本行        LinearLayout base = new LinearLayout(this.getContext());        LayoutParams baselp = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);        base.setLayoutParams(baselp);        base.setOrientation(LinearLayout.VERTICAL);        //每一个KEY就是一个tag行，每一个tag行包含多个tag        for (Integer key : result.keySet()) {            List<View> views = result.get(key);            LinearLayout root = new LinearLayout(this.getContext());            LayoutParams rootlp = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);            root.setLayoutParams(rootlp);            root.setOrientation(LinearLayout.HORIZONTAL);            for (int j = 0; j < views.size(); j++) {                View v = views.get(j);                TextView textView = (TextView) v.findViewById(R.id.txt_jc_text);                textView.setOnClickListener(new OnClickListener() {                    @Override                    public void onClick(View v) {                        for (TextView tv : tvlist) {                            tv.setSelected(false);                            tv.setTextColor(getResources().getColor(themeTextColorNormal));                            tv.setTextSize(themeTextSizeNormal);                        }                        v.setSelected(true);                        ((TextView) v).setTextColor(getResources().getColor(themeTextColorSelected));                        ((TextView) v).setTextSize(themeTextSizeSelected);                        int index = Integer.parseInt(((View) v.getParent()).getTag().toString());                        selectedIndex = index;                        adapter.onClick(LabelView.this.adapter.list.get(index));                    }                });                ImageView imgClear = (ImageView) v.findViewById(R.id.img_jc_clean);                imgClear.setOnClickListener(new OnClickListener() {                    @Override                    public void onClick(View v) {                        int index = Integer.parseInt(((View) v.getParent()).getTag().toString());                        Object object = LabelView.this.adapter.list.get(index);                        for (int i = 0; i < adapter.list.size(); i++) {                            if (adapter.list.get(i) == object) {                                adapter.list.remove(i);                                removeAllViews();                                reDrawList();                                break;                            }                        }                        adapter.onDelete(object);                    }                });                root.addView(v);            }            base.addView(root);        }        addView(base);        redraw = false;    }    public void setAdapter(TagAdapter tagAdapter) {        this.removeAllViews();        this.adapter = tagAdapter;        this.redraw = true;    }    @Override    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        drawList();    }    /**     * you need new TagView().new TagAdapter(T)...     * or     * you can extends TagAdapter     *     * @param <T>     */    public abstract class TagAdapter<T> {        List<T> list;        public TagAdapter(List<T> list) {            this.list = list;        }        public abstract String getText(T t);        public abstract void onClick(T t);        public abstract void onDelete(T t);        public boolean enableDelete(T t) {            return enableDelete;        }    }    public <T> T getSelected() {        if (selectedIndex != -1)            return (T) this.adapter.list.get(selectedIndex);        return null;    }    public void setSelected(int index) {        tvlist.get(index).callOnClick();    }    public LabelView(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    public LabelView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    public int getThemeTextColorNormal() {        return themeTextColorNormal;    }    public void setThemeTextColorNormal(int themeTextColorNormal) {        this.themeTextColorNormal = themeTextColorNormal;    }    public int getThemeTextColorSelected() {        return themeTextColorSelected;    }    public void setThemeTextColorSelected(int themeTextColorSelected) {        this.themeTextColorSelected = themeTextColorSelected;    }    public int getThemeTextSizeNormal() {        return themeTextSizeNormal;    }    public void setThemeTextSizeNormal(int themeTextSizeNormal) {        this.themeTextSizeNormal = themeTextSizeNormal;    }    public int getThemeTextSizeSelected() {        return themeTextSizeSelected;    }    public void setThemeTextSizeSelected(int themeTextSizeSelected) {        this.themeTextSizeSelected = themeTextSizeSelected;    }    public int getThemeSelectorBackgroundDraw() {        return themeSelectorBackgroundDraw;    }    public void setThemeSelectorBackgroundDraw(int themeSelectorBackgroundDraw) {        this.themeSelectorBackgroundDraw = themeSelectorBackgroundDraw;    }    public int getThemeDelImg() {        return themeDelImg;    }    public void setThemeDelImg(int themeDelImg) {        this.themeDelImg = themeDelImg;    }}